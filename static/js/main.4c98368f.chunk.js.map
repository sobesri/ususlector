{"version":3,"sources":["Widgets/CopyToClipboardTextArea.js","Widgets/XMLReader.js","App.js","serviceWorker.js","index.js"],"names":["CopyToClipboardTextArea","copyCodeToClipboard","textArea","select","document","execCommand","className","title","onClick","ref","textarea","value","this","props","text","Component","XMLReader","useState","selectedFile","setFile","number","setNum","splitTexts","setTexts","Row","Col","md","type","onChange","event","files","target","strFiles","index","file","fileReader","FileReader","onloadend","push","result","join","readAsText","length","multiple","texts","split","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAEqBA,E,4MAEjBC,oBAAsB,WACP,EAAKC,SACbC,SACHC,SAASC,YAAY,S,uDAGf,IAAD,OACL,OACI,oCACI,6BACI,8BACIC,UAAU,WACVC,MAAM,gBAAgBC,QAAS,kBAAM,EAAKP,uBAC1CQ,IAAK,SAACC,GAAD,OAAc,EAAKR,SAAWQ,GACnCC,MAAOC,KAAKC,MAAMC,a,GAhBWC,aCExCC,EAAY,WAAO,IAAD,EAEKC,qBAFL,mBAEpBC,EAFoB,KAENC,EAFM,OAGFF,mBAAS,GAHP,mBAGpBG,EAHoB,KAGZC,EAHY,OAIIJ,mBAAS,IAJb,mBAIpBK,EAJoB,KAIRC,EAJQ,KA4B3B,OACI,kBAACC,EAAA,EAAD,CAAKlB,UAAU,UACX,kBAACmB,EAAA,EAAD,KACI,iEAGA,wFACA,kBAACD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACJ,2BAAOC,KAAK,OAAOC,SA/BlB,SAAAC,GACjB,IAAIC,EAAQD,EAAME,OAAOD,MACrBE,EAAW,GACf,GAAIF,EACA,IADQ,IAAD,WACEG,GACL,IAAMC,EAAOJ,EAAMG,GACbE,EAAa,IAAIC,WACvBD,EAAWE,UAAY,WACnBL,EAASM,KAAKH,EAAWI,QACzBpB,EAAQa,EAASQ,KAAK,OAE1BL,EAAWM,WAAWP,IAPjBD,EAAQ,EAAGA,EAAQH,EAAMY,OAAQT,IAAU,EAA3CA,IA2B8CU,UAAQ,IACnD,4BAAQnC,QAhBL,WACnB,IAAIoC,EAAQ1B,EAAeA,EAAa2B,MAAM,OAAS,GACvDtB,EAASqB,GACTvB,EAAOuB,EAAMF,UAaG,UAIJ,kBAACjB,EAAA,EAAD,CAAKC,GAAG,KAAI,4BAAKN,EAAL,QAAkBA,EAAS,GAAK,OAE/CE,EAAWoB,OAAS,GACjB,kBAAClB,EAAA,EAAD,CAAKlB,UAAU,eACX,kBAACmB,EAAA,EAAD,CAAKC,GAAI,IACL,kBAAC,EAAD,CAAyBZ,KAAM,CAACQ,EAAWkB,KAAK,aC/B7DM,MAff,WACE,OACE,yBAAKxC,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACE,6CAAwB,6BAD1B,6BAIF,kBAACkB,EAAA,EAAD,KACE,kBAAC,EAAD,SCFYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASmD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c98368f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class CopyToClipboardTextArea extends Component {\r\n\r\n    copyCodeToClipboard = () => {\r\n        const el = this.textArea\r\n        el.select()\r\n        document.execCommand(\"copy\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <textarea\r\n                        className=\"textArea\"\r\n                        title=\"click to copy\" onClick={() => this.copyCodeToClipboard()}\r\n                        ref={(textarea) => this.textArea = textarea}\r\n                        value={this.props.text}\r\n                    />\r\n                    {/* <span class=\"ui-icon ui-icon-arrowthick-1-n\" className=\"copyIcon\">c</span> */}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport CopyToClipboardTextArea from './CopyToClipboardTextArea';\r\n\r\nexport const XMLReader = () => {\r\n\r\n    const [selectedFile, setFile] = useState();\r\n    const [number, setNum] = useState(0);\r\n    const [splitTexts, setTexts] = useState([]);\r\n\r\n    const onFileChange = event => {\r\n        let files = event.target.files;\r\n        let strFiles = [];\r\n        if (files) {\r\n            for (let index = 0; index < files.length; index++) {\r\n                const file = files[index];\r\n                const fileReader = new FileReader();\r\n                fileReader.onloadend = () => {\r\n                    strFiles.push(fileReader.result);\r\n                    setFile(strFiles.join(' '));\r\n                }\r\n                fileReader.readAsText(file);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onParseClicked = () => {\r\n        let texts = selectedFile ? selectedFile.split(/\\s+/) : [];\r\n        setTexts(texts);\r\n        setNum(texts.length);\r\n    }\r\n\r\n    return (\r\n        <Row className=\"reader\">\r\n            <Col>\r\n                <h3>\r\n                    Read number of words in text file\r\n            </h3>\r\n                <p>Words are counted when there is a space between them only</p>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <input type=\"file\" onChange={onFileChange} multiple />\r\n                        <button onClick={onParseClicked}>\r\n                            Count\r\n                </button>\r\n                    </Col>\r\n                    <Col md=\"6\"><h2>{number} word{number > 1 && 's'}</h2></Col>\r\n                </Row>\r\n                {splitTexts.length > 0 &&\r\n                    <Row className=\"displayText\">\r\n                        <Col md={12}>\r\n                            <CopyToClipboardTextArea text={[splitTexts.join(' ')]} />\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n            </Col>\r\n        </Row>\r\n    );\r\n}","import React from 'react';\nimport './App.scss';\nimport { XMLReader } from './Widgets/XMLReader';\nimport { Row } from 'reactstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <span>Usus Lector</span><br />\n        Still a work in progress</p>\n      </header>\n      <Row>\n        <XMLReader />\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}